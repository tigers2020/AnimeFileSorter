---
description: 
globs: 
alwaysApply: true
---
아래는 Python 코딩 시 지켜야 할 주요 룰입니다.  

1. **코드 스타일 (PEP8 준수)**  
   - **들여쓰기**: 스페이스 4칸 사용  
   - **라인 길이**: 최대 79자 (긴 문자열은 괄호로 묶어 분할)  
   - **공백**: 연산자 주위에 한 칸, 쉼표 뒤에 한 칸  
   - **빈 줄**: 함수·클래스 사이에 2줄, 메서드 사이에 1줄  
   - **line 1000 룰**: 하나의 파일은 1000 라인을 넘기지 않는다.
   - **메서드 확인**: 새로운 메서드를 만들기 전 관련 메서드가 있는지 한번 검토 후에 만든다.

2. **네이밍 컨벤션**  
   - **모듈·패키지**: 소문자, 밑줄(`snake_case`) 사용 가능  
   - **클래스**: `CamelCase`  
   - **함수·변수**: 소문자 + 밑줄(`snake_case`)  
   - **상수**: 모두 대문자 + 밑줄 (`UPPER_SNAKE_CASE`)  

3. **임포트 순서**  
   1. 표준 라이브러리  
   2. 서드파티 라이브러리  
   3. 로컬 앱/라이브러리 모듈  
   
   그리고 각 그룹 사이에 빈 줄 한 줄 추가  

4. **문서화 (Docstrings, PEP257)**  
   - 모듈·클래스·함수마다 삼중따옴표(`"""`) 사용  
   - 간결한 설명 + 매개변수·반환값·예외사항 기술  

5. **타입 힌트 (Type Hints)**  
   - 함수 시그니처에 매개변수·반환 타입 표기  
   - `mypy` 같은 도구로 정적 타입 검사  

6. **예외 처리**  
   - 구체적인 예외 클래스(`ValueError`, `KeyError` 등) 사용  
   - 필요 없는 `except Exception:` 지양  
   - 리소스 해제를 위해 항상 `finally` 또는 컨텍스트 매니저 사용  

7. **로깅**  
   - `print()` 대신 `logging` 모듈 사용  
   - 모듈별 로거 생성 (`logger = logging.getLogger(__name__)`)  

8. **테스트**  
   - `pytest` 또는 `unittest`로 단위 테스트 작성  
   - 테스트 커버리지 최소 80% 이상 유지  

9. **컨텍스트 매니저**  
   - 파일·네트워크·락 등 리소스 다룰 때 `with` 문 사용  
   ```python
   with open("data.txt", "r") as f:
       data = f.read()
   ```

10. **포매터·린터 사용**  
    - 코드 일관성 위해 `black`, `isort`, `flake8` 등 적용  

---

### 예시 코드

```python
# example_module.py

import os
import sys

from third_party import library

CONSTANT_VALUE: int = 42

class MyClass:
    """
    Represents a sample class.
    """

    def __init__(self, name: str) -> None:
        """
        Initialize with a name.
        """
        self.name = name

    def greet(self) -> str:
        """
        Return a greeting message.
        """
        return f"Hello, {self.name}!"

def main() -> None:
    """
    Main entry point.
    """
    obj = MyClass("World")
    print(obj.greet())

if __name__ == "__main__":
    main()
```


위 룰들을 따르면 가독성·유지보수성·안정성이 모두 향상됩니다.